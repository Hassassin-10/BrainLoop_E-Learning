'use server';

import { firestoreServerTimestamp, type FieldValue } from "@/lib/firebase";
import {
  collection,
  doc,
  addDoc,
  setDoc,
  getDoc,
  getDocs,
  query,
  orderBy,
  deleteDoc,
  type DocumentData
} from "firebase/firestore";
import type {
  GameAssessment,
  GameAssessmentOutput,
  UserGameScore
} from "@/types/gameAssessment";
import { getDb } from "@/lib/db-helpers";

// Collection paths
const COURSES_COLLECTION = "courses";
const MODULES_SUBCOLLECTION = "modules";
const GAME_ASSESSMENTS_SUBCOLLECTION = "gameAssessments";
const USERS_COLLECTION = "users";
const GAME_SCORES_SUBCOLLECTION = "gameScores";

// Utility function to get document data with ID
const getDocWithId = <T extends DocumentData>(doc: any) => ({
  id: doc.id,
  ...doc.data()
}) as T;

export async function getGameAssessmentsForModule(
  courseId: string,
  moduleId: string,
  includeHidden = true
): Promise<GameAssessment[]> {
  if (!courseId || !moduleId) throw new Error("Course ID and Module ID are required");

  const db = getDb();
  const collectionRef = collection(
    db,
    COURSES_COLLECTION,
    courseId,
    MODULES_SUBCOLLECTION,
    moduleId,
    GAME_ASSESSMENTS_SUBCOLLECTION
  );

  try {
    const snapshot = await getDocs(query(collectionRef, orderBy("generatedAt", "desc")));
    const assessments = snapshot.docs.map(doc => getDocWithId<GameAssessment>(doc));
    return includeHidden ? assessments : assessments.filter(a => !a.hidden);
  } catch (error) {
    console.error("Error fetching game assessments:", error);
    throw new Error("Failed to fetch game assessments");
  }
}

export async function getGameAssessment(
  courseId: string,
  moduleId: string,
  assessmentId: string
): Promise<GameAssessment | null> {
  if (!courseId || !moduleId || !assessmentId) {
    throw new Error("Course ID, Module ID, and Assessment ID are required");
  }

  const db = getDb();
  const docRef = doc(
    db,
    COURSES_COLLECTION,
    courseId,
    MODULES_SUBCOLLECTION,
    moduleId,
    GAME_ASSESSMENTS_SUBCOLLECTION,
    assessmentId
  );

  try {
    const snapshot = await getDoc(docRef);
    return snapshot.exists() ? getDocWithId<GameAssessment>(snapshot) : null;
  } catch (error) {
    console.error("Error fetching game assessment:", error);
    throw new Error("Failed to fetch game assessment");
  }
}

export async function saveGeneratedAssessment(
  courseId: string,
  moduleId: string,
  assessmentOutput: GameAssessmentOutput
): Promise<string> {
  const assessmentData = {
    courseId,
    moduleId,
    ...assessmentOutput,
    generatedAt: firestoreServerTimestamp(),
    approvedByAdmin: false
  };

  const db = getDb();
  const collectionRef = collection(
    db,
    COURSES_COLLECTION,
    courseId,
    MODULES_SUBCOLLECTION,
    moduleId,
    GAME_ASSESSMENTS_SUBCOLLECTION
  );

  try {
    const docRef = await addDoc(collectionRef, assessmentData);
    return docRef.id;
  } catch (error) {
    console.error("Error saving assessment:", error);
    throw new Error("Failed to save assessment");
  }
}

export async function saveUserGameScore(
  userId: string,
  data: {
    assessmentId: string;
    courseId: string;
    moduleId: string;
    score: number;
    attempts: number;
    answers: Record<string, string>;
  }
): Promise<void> {
  if (!userId || !data.assessmentId) {
    throw new Error("User ID and Assessment ID are required");
  }

  const db = getDb();
  const docRef = doc(
    db,
    USERS_COLLECTION,
    userId,
    GAME_SCORES_SUBCOLLECTION,
    data.assessmentId
  );

  const scoreData = {
    userId,
    assessmentId: data.assessmentId,
    courseId: data.courseId,
    moduleId: data.moduleId,
    score: data.score,
    maxScore: 100,
    timeTaken: 0,
    answers: data.answers,
    completedAt: firestoreServerTimestamp()
  };

  try {
    await setDoc(docRef, scoreData);
  } catch (error) {
    console.error("Error saving game score:", error);
    throw new Error("Failed to save game score");
  }
}

export async function getUserGameScore(
  userId: string,
  assessmentId: string
): Promise<UserGameScore | null> {
  if (!userId || !assessmentId) {
    throw new Error("User ID and Assessment ID are required");
  }

  const db = getDb();
  const docRef = doc(
    db,
    USERS_COLLECTION,
    userId,
    GAME_SCORES_SUBCOLLECTION,
    assessmentId
  );

  try {
    const snapshot = await getDoc(docRef);
    return snapshot.exists() ? getDocWithId<UserGameScore>(snapshot) : null;
  } catch (error) {
    console.error("Error fetching game score:", error);
    throw new Error("Failed to fetch game score");
  }
}

export async function setGameAssessmentApproval(
  courseId: string,
  moduleId: string,
  assessmentId: string,
  approveStatus: boolean
): Promise<void> {
  if (!courseId || !moduleId || !assessmentId) {
    throw new Error("Course ID, Module ID, and Assessment ID are required");
  }

  const db = getDb();
  const docRef = doc(
    db,
    COURSES_COLLECTION,
    courseId,
    MODULES_SUBCOLLECTION,
    moduleId,
    GAME_ASSESSMENTS_SUBCOLLECTION,
    assessmentId
  );

  try {
    await setDoc(docRef, { approvedByAdmin: approveStatus }, { merge: true });
  } catch (error) {
    console.error("Error updating approval status:", error);
    throw new Error("Failed to update approval status");
  }
}

export async function deleteGameAssessment(
  courseId: string,
  moduleId: string,
  assessmentId: string
): Promise<void> {
  if (!courseId || !moduleId || !assessmentId) {
    throw new Error("Course ID, Module ID, and Assessment ID are required");
  }

  const db = getDb();
  const docRef = doc(
    db,
    COURSES_COLLECTION,
    courseId,
    MODULES_SUBCOLLECTION,
    moduleId,
    GAME_ASSESSMENTS_SUBCOLLECTION,
    assessmentId
  );

  try {
    await deleteDoc(docRef);
  } catch (error) {
    console.error("Error deleting game assessment:", error);
    throw new Error("Failed to delete game assessment");
  }
}
