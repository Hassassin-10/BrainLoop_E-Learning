import type { Timestamp, FieldValue } from "firebase/firestore";

export type ChallengeType =
  | "python_debug"
  | "logic_puzzle"
  | "algorithm_choice"
  | "fill_in_the_blanks"
  | "story_decision";

export interface GameAssessmentChallengeData {
  codeSnippet?: string; // For python_debug
  options?: { id: string; text: string; isCorrect?: boolean }[]; // For algorithm_choice, logic_puzzle options
  blanks?: { id: string; correctValue: string; hint?: string }[]; // For fill_in_the_blanks
  storyBranches?: { choice: string; nextStoryNodeId: string }[]; // For story_decision
  puzzleDescription?: string; // For logic_puzzle
}

export interface GameAssessmentSolution {
  correctOptionId?: string; // For algorithm_choice
  correctCode?: string; // For python_debug
  explanation: string;
  correctValues?: { blankId: string; value: string }[]; // Changed from Record<string, string> to array of objects
  optimalPath?: string; // For story_decision
}

export interface GameAssessment {
  id: string; // Firestore document ID
  courseId: string;
  moduleId: string;
  title: string;
  storyNarration: string; // Thematic intro to the challenge
  challengeType: ChallengeType;
  challengeData: GameAssessmentChallengeData;
  solution: GameAssessmentSolution;
  difficulty: "easy" | "medium" | "hard";
  generatedAt: Timestamp | FieldValue;
  approvedByAdmin?: boolean; // For admin review flow
  hidden?: boolean; // For hiding assessments
  learningObjectives?: string[]; // Learning objectives that this assessment targets
}

// Output type for the Genkit flow when generating an assessment
export type GameAssessmentOutput = Omit<
  GameAssessment,
  "id" | "courseId" | "moduleId" | "generatedAt" | "approvedByAdmin"
>;

export interface UserGameScore {
  id?: string; // Firestore document ID (will be assessmentId for simplicity)
  userId: string; // Firebase Auth UID
  assessmentId: string;
  courseId: string;
  moduleId: string;
  score: number; // 0-100 or points
  maxScore: number; // Maximum possible score
  timeTaken: number; // Time taken in seconds
  answers: Record<string, string>; // User's answers for each question/challenge
  completedAt: Timestamp | FieldValue; // Timestamp when the game was completed
}

// Input type for generating a game assessment
export interface GameAssessmentGenerationInput {
  courseContext: {
    courseId: string;
    moduleId: string;
    moduleTitle: string;
    moduleDescription: string;
    learningObjectives?: string[];
  };
  challengeType: ChallengeType;
  difficulty: "easy" | "medium" | "hard";
  additionalContext?: string;
}
